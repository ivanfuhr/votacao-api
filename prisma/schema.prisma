generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id        String        @id @default(uuid()) @db.Uuid
  name      String
  email     String        @unique
  password  String
  document  String        @unique
  role      Role          @default(USER)
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @default(now()) @map("updated_at")
  votes     SubjectVote[]

  @@map("users")
}

model Subject {
  id          String          @id @default(uuid()) @db.Uuid
  title       String
  description String
  categoryId  String          @map("category_id") @db.Uuid
  category    SubjectCategory @relation(fields: [categoryId], references: [id])
  timeToEnd   Int             @default(60) @map("time_to_end")
  startAt     DateTime        @map("start_at")
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @default(now()) @map("updated_at")
  votes       SubjectVote[]

  @@map("subjects")
}

model SubjectCategory {
  id        String    @id @default(uuid()) @db.Uuid
  title     String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  subjects  Subject[]

  @@map("subject_categories")
}

model SubjectVote {
  id        String   @id @default(uuid()) @db.Uuid
  subjectId String   @map("subject_id") @db.Uuid
  subject   Subject  @relation(fields: [subjectId], references: [id])
  userId    String   @map("user_id") @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("subject_votes")
}
